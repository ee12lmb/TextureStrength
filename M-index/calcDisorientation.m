function [ theta ] = calcDisorientation(orientation,crystal)
%calcDisorientation returns smallest angle for matrix of given symmetry
%   By premultiplying an orientation matrix by each of the 
%   crystallographically related solutions for a given symmetry, the
%   smallest possible angle is found. This is the 'disortientation' angle
%   (REF NEEDED)
%
%   Inputs:  orientation - an orientation matrix
%               symmetry - identifier for crystal symmetry (NEEDS SORTING)
%
%   Outputs:       theta - the disorientation angle
%
%   Usage: [ theta ] = calcDisorientation(orientation,crystal)

%% Determine symmetry

% Take input crystal and define appropriate symmetry operators
switch lower(crystal)
    
    case 'olivine'

        % symmetry operators for orthrombic crystal symmetry
        SymOp{1} = [1, 0, 0;...
                    0, 1, 0;...
                    0, 0, 1];
                
        SymOp{2} = [1, 0, 0;...
                    0,-1, 0;...
                    0, 0,-1];
                
        SymOp{3} = [-1, 0, 0;...
                     0, 1, 0;...
                     0, 0,-1];
                 
        SymOp{4} = [-1, 0, 0;...
                     0,-1, 0;...
                     0, 0, 1];
         
%==========================================================================    
    case 'quartz'
        
        SymOp{1}  = [1, 0, 0;...
                     0, 1, 0;...
                     0, 0, 1];
                
        SymOp{2}  = [0, 0,-1;...
                     0,-1, 0;...
                    -1, 0, 0];
               
        SymOp{3}  = [0, 0,-1;...
                     0, 1, 0;...
                     1, 0, 0];
                
        SymOp{4}  = [-1, 0, 0;...
                      0, 1, 0;...
                      0, 0,-1];
                 
        SymOp{5}  = [0, 0, 1;...
                     0, 1, 0;...
                    -1, 0, 0];
               
        SymOp{6}  = [1, 0, 0;...
                     0, 0,-1;...
                     0, 1, 0];
                
        SymOp{7}  = [1, 0, 0;...
                     0,-1, 0;...
                     0, 0, -1];
                
        SymOp{8}  = [1, 0, 0;...
                     0, 0, 1;...
                     0,-1, 0];
                
        SymOp{9}  = [0,-1, 0;...
                     1, 0, 0;...
                     0, 0, 1];
                
        SymOp{10} = [-1,0, 0;...
                     0,-1, 0;...
                     0, 0, 1];
                 
        SymOp{11} = [0, 1, 0;...
                     -1,0, 0;...
                     0, 0, 1];
                 
        SymOp{12} = [0, 0, 1;...
                     1, 0, 0;...
                     0, 1, 0];
                 
        SymOp{13} = [0, 1, 0;...
                     0, 0, 1;...
                     1, 0, 0];
                 
        SymOp{14} = [0, 0,-1;...
                     -1,0, 0;...
                     0, 1, 0];
                 
        SymOp{15} = [0,-1, 0;...
                     0, 0, 1;...
                     -1,0, 0];
                 
        SymOp{16} = [0, 1, 0;...
                     0, 0,-1;...
                     -1,0, 0];
                 
        SymOp{17} = [0, 0,-1;...
                     1, 0, 0;...
                     0,-1, 0];
                 
        SymOp{18} = [0, 0, 1;...
                     -1,0, 0;...
                     0,-1, 0];
                 
        SymOp{19} = [0,-1, 0;...
                     0, 0,-1;...
                     1, 0, 0];
                 
        SymOp{20} = [0, 1, 0;...
                     1, 0, 0;...
                     0, 0,-1];
                 
        SymOp{21} = [-1,0, 0;...
                     0, 0, 1;...
                     0, 1, 0];
                 
        SymOp{22} = [0, 0, 1;...
                     0,-1, 0;...
                     1, 0, 0];
                 
        SymOp{23} = [0,-1, 0;...
                     -1,0, 0;...
                     0, 0,-1];
                 
        SymOp{24} = [-1,0, 0;...
                     0, 0,-1;...
                     0,-1, 0];
       
%==========================================================================
    otherwise 
        error('Crystal symmetry not indexed')
end
% Multiply the orientation by all symmetry operators and find the minimum
% angle of all of these
for i = 1:length(SymOp)
    
    rot_tmp   = orientation * SymOp{i};
    theta_tmp(i) = acos(((rot_tmp(1,1) + rot_tmp(2,2) + rot_tmp(3,3) - 1)/2));
    
end

theta = min(theta_tmp);

end

